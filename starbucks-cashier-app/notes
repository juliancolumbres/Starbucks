Running Docker demo

Build starbucks-api image:

    docker build -t spring-starbucks-api .

Run SQL in kong-network:

    docker run -d --network kong-network --name mysql -td -p 3306 -e MYSQL_ROOT_PASSWORD=cmpe172 mysql:8.0

Configure MySQL database

    mysql --password
    cmpe172
    create database starbucks ;
    create user 'admin'@'%' identified by 'cmpe172'; 
    grant all on starbucks.* to 'admin'@'%'; 

    use starbucks ;

Run starbucks-api in kong-network

    docker run --network starbucks -e "MYSQL_HOST=mysql" -e "MYSQL_USERNAME=root" -e "MYSQL_PASSWORD=cmpe172" --name starbucks-api -td -p 8080:8080 spring-starbucks-api	
    docker run --network starbucks -e "MYSQL_HOST=mysql" --name spring-starbucks-api -td -p 8080:8080 spring-starbucks-api       

Configure kong in kong-network

    docker run -d --name kong \
        --network=kong-network \
        -e "KONG_DATABASE=off" \
        -e "KONG_PROXY_ACCESS_LOG=/dev/stdout" \
        -e "KONG_ADMIN_ACCESS_LOG=/dev/stdout" \
        -e "KONG_PROXY_ERROR_LOG=/dev/stderr" \
        -e "KONG_ADMIN_ERROR_LOG=/dev/stderr" \
        -e "KONG_ADMIN_LISTEN=0.0.0.0:8001, 0.0.0.0:8444 ssl" \
        -p 80:8000 \
        -p 443:8443 \
        -p 8001:8001 \
        -p 8444:8444 \
        kong:2.4.0

    docker exec -it kong kong config init /home/kong/kong.yaml
    docker exec -it kong cat /home/kong/kong.yaml >> kong.yaml

Copy this to kong.yaml:

    _format_version: "1.1"

    services:
    - name: starbucks
    protocol: http
    host: starbucks-api
    port: 8080
    path: /
    plugins:
    - name: key-auth  
    routes:
    - name: api
        paths:
        - /api
        
    consumers:
    - username: apiclient
    keyauth_credentials:
    - key: 2H3fONTa8ugl1IcVS7CjLPnPIS2Hp9dJ

Update kong.yaml in container and reload:

    http :8001/config config=@kong.yaml
    docker exec -it kong kong reload

Try pinging:

    http localhost/api/ping
    http localhost/api/ping apikey:2H3fONTa8ugl1IcVS7CjLPnPIS2Hp9dJ

    curl http://kong:8000/api/ping apikey:2H3fONTa8ugl1IcVS7CjLPnPIS2Hp9dJ
    curl -v -H @{'apikey' = '2H3fONTa8ugl1IcVS7CjLPnPIS2Hp9dJ'} http://kong:8000/api/ping

    curl -X GET \
        'http://kong:8000/api/ping' \
         -H 'apikey: 2H3fONTa8ugl1IcVS7CjLPnPIS2Hp9dJ'


docker build -t starbucks-cashier-app .
 docker run --network kong-network -e "API_HOST=kong" -e "API_PORT=8000" -e "API_KEY=2H3fONTa8ugl1IcVS7CjLPnPIS2Hp9dJ" --name starbucks-cashier-app -td -p 81:8081 starbucks-cashier-app	


 curl -X GET         'http://localhost:80/api/ping'          -H 'apikey: 2H3fONTa8ugl1IcVS7CjLPnPIS2Hp9dJ'


 CREATE TABLE SPRING_SESSION (
  PRIMARY_ID CHAR(36) NOT NULL,
  SESSION_ID CHAR(36) NOT NULL,
  CREATION_TIME BIGINT NOT NULL,
  LAST_ACCESS_TIME BIGINT NOT NULL,
  MAX_INACTIVE_INTERVAL INT NOT NULL,
  EXPIRY_TIME BIGINT NOT NULL,
  PRINCIPAL_NAME VARCHAR(100),
  CONSTRAINT SPRING_SESSION_PK PRIMARY KEY (PRIMARY_ID)
) ENGINE=InnoDB ROW_FORMAT=DYNAMIC;

CREATE UNIQUE INDEX SPRING_SESSION_IX1 ON SPRING_SESSION (SESSION_ID);
CREATE INDEX SPRING_SESSION_IX2 ON SPRING_SESSION (EXPIRY_TIME);
CREATE INDEX SPRING_SESSION_IX3 ON SPRING_SESSION (PRINCIPAL_NAME);

CREATE TABLE SPRING_SESSION_ATTRIBUTES (
  SESSION_PRIMARY_ID CHAR(36) NOT NULL,
  ATTRIBUTE_NAME VARCHAR(200) NOT NULL,
  ATTRIBUTE_BYTES BLOB NOT NULL,
  CONSTRAINT SPRING_SESSION_ATTRIBUTES_PK PRIMARY KEY (SESSION_PRIMARY_ID, ATTRIBUTE_NAME),
  CONSTRAINT SPRING_SESSION_ATTRIBUTES_FK FOREIGN KEY (SESSION_PRIMARY_ID) REFERENCES SPRING_SESSION(PRIMARY_ID) ON DELETE CASCADE
) ENGINE=InnoDB ROW_FORMAT=DYNAMIC;

create database cmpe172 ;
create user 'admin'@'%' identified by 'cmpe172'; 
grant all on cmpe172.* to 'admin'@'%'; 

use cmpe172 ;


docker run --platform=linux/amd64 -d --name mysql -td -p 3306:3306 -e MYSQL_ROOT_PASSWORD=cmpe172 mysql:8.0 


kong-static-ip 34.28.143.234

34.67.111.47